仓库的组织结构和相关概念
	svn属于中心式的仓库管理，完整的仓库数据，统一维护在服务器端的仓库中，对于客户端来说，本地取得的数据不是完整
		的仓库，只是仓库中特定版本的部分或全部数据。同时，客户端还负责维护本地数据的变更情况，在客户端并不
		拥有仓库完整的历史数据。本地的工作树和仓库是相对独立的
	git应该是数据分布式的仓库管理，倒不是说仓库的内容分布在不同的server上，只是对仓库而言，没有中心仓库之说，
		所有的仓库都是平等的。对于一个仓库的不同工作拷贝，每个都拥有完整的历史记录，工作树和仓库基本是合二为一的
	在svn中，从仓库checkout的一个工作树，每个子目录下都维护这自己的.svn目录，记录着该目录中文件的修改情况以及和
		服务器端仓库的对应关系。所以svn可以局部checkout部分路径下的内容，而不用checkout整个分支
	git仓库中，项目根目录下的.git目录统一管理了所有仓库数据和当前工作树的相关信息
	在svn中，默认采用FSFS的数据库格式，任何提交都是一个版本的递增。所谓分支，tag等概念都只是仓库中不同路径上的
		一个对象或索引而已，和普通的路径并没有本质的区别。在工作中，可以同时checkout多个分支的内容
	在git中，其内部的对象层级依赖关系或许和svn类似，但是其工作树的视图表现形式和svn完全不同。工作树永远是一个
		完整的分支，不同的分支由不同的head索引去构建，你不可能在工作树中同时获得多个分支的内容
基本操作
	1.仓库创建初始化
	在svn中，仓库本身的管理和日常使用，用的是两套不同的命令。仓库的创建和备份维护等使用命令svnadmin，在git中
		创建新仓库使用git init，
	在svn中，创建仓库的地方并不是你日常使用的仓库的地方，你需要在别的地方checkout出特定的仓库路径作为你的日常
		工作目录。在git中，仓库所在的目录也就是你的日常工作目录，没有服务器端和客户端之分。（严格来说，
		.git目录才是仓库，.git目录外的地方是你的工作目录）
	2.checkout仓库
	在svn中使用checkout来checkout本地或远程仓库的代码。对git来说，也有checkout命令。由于需要在本地拥有仓库，
		通常checkout之前先要git clone来获取一个仓库的拷贝，默认的git clone操作同时还会checkout一份远程
		仓库上当前active的分支
	svn可以checkout整个仓库，也可以只checkout仓库中特定路径/分支下的子目录。git只能checkout整个分支
	3.将文件纳入版本管理
	svn使用svn add，这样在以后commit数据之前，svn会根据这些add过的对象的修改情况，构建一个commit tree。在git
		中，因为存在index的概念，要将一个文件纳入版本管理的范畴，首先是用git-update-index --add 将文件纳入
		index的监控范围，只有更新到Index中的内容才会在commit时被提交。文件本身的改动并不会自动更新到index
		中。当然，通常用git add这样的封装脚本来调用git-update-index
	4.检查当前状态
	svn status可以显示当前working tree的文件修改状态，在git中git status显示当前index的状态和working tree的状态
	svn info可以显示当前工作分支的svn remote路径，git remote -v可以显示当前工作的git仓库的远程路径（如果有的话）
	5.提交文件
	svn commit, git commit
	6.删除文件
	在使用svn rm删除一个目录时，因为每个目录下都存在.svn目录，所以commit之前，目录里的其他被删除，但是目录及其
		子目录不会被真正删除，只有commit后，目录才会被真正删除
	git rm删除文件，如果某目录下的所有文件都被删除，该目录会被自动删除，即无法保留空目录，也无法添加一个空目录
		到仓库里
	7.查看log
	svn log用来查看提交时所填写的log信息。git log可以查看log信息，还可以输出特定版本的具体变更内容等信息
	8.版本回溯
	在svn中，不提供任何从仓库中删除对象的机制，任何的修改都会导致版本的递增。所以如果丢弃(revert)一个修改，会
		增加一个新版本。git中提供了重置committed tree对象索引的机制。可以通过git-reset这样的操作将当前分支
		的版本恢复到以前的某个状态，不过可能会出问题，包括在git-push之类的操作时会被reject，需要强行push之类
		的，如果使用git-revert，就是和svn revert是一个思路了
	9.放弃当前的修改
	svn revert可以恢复文件到当前服务器上的状态
	git checkout可以恢复到index中的状态，如果恢复到特定版本,使用git checkout HEAD file这样的操作
	git reset -hard HEAD可以快速彻底的放弃自从上次commit依赖的所有变更
	10.代码合并
	git merge只能以commit为单位，merge整个分支的所有修改，不能有选择的merge部分路径下的修改。如果merge成功，内容
		会直接提交，而工作树上的修改仍会保持
	svn merge可以自由的选择merge哪一部分，哪一段版本之间的代码，而git只能通过自己diff/patch来实现
	11.获取单纯的代码
	svn export可以只获取代码，而不下载.svn信息。git中似乎没有这样的命令，不过git仓库下只有一个.git目录，clone，
		checkout后只要删除.git目录即可
协同工作和权限控制
	1.远程提交
	svn不存在特殊的远程提交的概念，所有的commit操作都可以认为是对远程仓库的更新动作。
	git push用于将本地仓库的数据更新到远程仓库中
	2.远程更新
	svn只有一个中心仓库，svn update即远程更新
	git中的checkout尽管功能和svn update类似，但是远程更新不属于checkout的功能涵盖范围
	git fetch和git pull完成远程更新操作，git fetch将远程数据库的object拷贝到本地，然后更新remotes head的refs，git
		pull则是在git fetch的基础上对当前分支外加merge操作
	3.多分支协同工作
	svn switch可以在同一个工作树上，对不同的模块checkout不同分支上的代码。比如：我从主干上checkout了整个内核树，
		然后使用switch命令将其中一个或几个驱动的目录或文件切换到我的个人分支或其他人的分支上去。这样，我可以
		用一个update同时从几个不同的来源更新特定的文件。而我在工作树上对switch过来的文件做的修改会自动提交到
		我的个人分支上，而不是主干的路径上，这样我的修改不会影响主干的内容，而同时又能随时更新主干上的最新内容。
	在git中，对多分支协同工作，常见的模式是fetch远程更新，然后merge到当前分支	
	4.权限控制
	目前还没有在git中发现类似svn的通过apache的用户帐号形式，对每一个用户精确控制到文件级别的读写权限	

