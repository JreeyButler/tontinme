#!/bin/bash
---Index
------alias
------chroot
------crontab
------find
------wget
#alias
	#工作中可能会经常删除一些core文件，可以这样定义到profile文件
		$alias rmcore="find . iname core -exec rm {} \;"	#iname表示忽略大小写
	#工作中可能经常要删除一些log文件，可以这样定义：
		$alias rmlog="find /logs -type f -name *.tar -size +500M -exec rm -i {} \;"
		$alias rmlg="find / -type f -name *.tar -size +1G -exec rm -i {} \;"
#chroot
	
#crontab
	#field		allowed values
	minute		0-59
	hour		0-23
	day of month	1-31
	month		1-12 (or names)
	day of week	0-7 (0 or 7 is Sun, or use names)
	#在一天做N次的计划任务
		#以下例子代表在12点和18点执行任务
		00 12，18 * * * /home/tontinme/test.sh	
	#在一天的特定时间段的计划任务
		#以下代表在12点到18点的每个小时的整点执行脚本
		00 12-18 * * * /home/tontinme/test.sh
		#以下代表在工作日（不包括周六日）的12点到18点的整点执行脚本
	#查看root以外用户的计划任务内容	
		#编辑使用-e选项
		#crontab -u tontinme -l
		00 12,18 * * * /home/tontinme/test.sh	
	#在相隔时间后执行计划任务
		#以下表示每10分钟执行一次任务
		* /10 * * * * /home/tontinme/test.sh
	#某特定相隔时间的计划任务
		#以下表示每年的第一分钟执行脚本
		@yearly /home/tontinme/test.sh
			#使用@yearly对应的是0 * * * *,还有如下可用：
			@reboot		run once, at startup
			@yearly		run once a year, "0 0 1 1 *"
			@annually	same as @yearly
			@monthly	run once a month, "0 0 1 * *"
			@weekly		run once a week, "0 0 * * 0"
			@daily		run once a day, "0 0 * * *"
			@midnight	same as @daily
			@hourly		run once an hour, "0 * * * *"
		#这里特别强调@reboot,可以设定重启后执行。
	#以秒为单位执行计划任务
		#以下表示每20秒执行一次：
		* * * * * sleep 20; /home/tontinme/test.sh
#find
	#忽略大小写的查找
		$find -iname 'xxx'
		./xxx
		./XXX
		./Xxx
	#查找文件目录的深度限制（从/开始计算。包括maxdepth和mindepth）
		[root@server test]# find / -name ‘passwd’
		/usr/share/doc/nss_ldap-253/pam.d/passwd
		/usr/bin/passwd
		/etc/pam.d/passwd
		/etc/passwd
		[root@server test]# cd /
		[root@server /]# find -mindepth 3 -maxdepth 3 -name ‘passwd’
		./usr/bin/passwd
		./etc/pam.d/passwd
	#根据文件属性查找
		#查找其中组权限是r的，也可以包括其他权限
		#find . -perm -g=r -type f -exec ls -l {} \;
		—-r—– 1 root root 0 01-08 20:45 ./FAn
		-rwxrwxrwx 1 root root 0 01-08 17:00 ./Fan
		-rw-r—– 1 root root 0 01-08 17:01 ./FAN
		-rw-r–r– 1 root root 0 01-08 17:01 ./fan
		#查找其中组权限是r的，不能包括其他权限
		#find . -perm g=r -type f -exec ls -l {} \;
		—-r—– 1 root root 0 01-08 20:45 ./FAn
	#查找空文件（0字节文件）
		#find ~ -empty
		#注：按照深度去查找，比如我只想查找2层深度的文件
			#find . -maxdepth 2 -empty
			./root/spread-bin-4.0.0
	#工作中可能想要删除一些临时文件，想要删除最大的5个文件，这样查找：
		#find . -type f -exec ls -s {} \; | sort -n -r | head 5
		201424 ./ctier-server-3.6.0-1.noarch.rpm
		14568 ./.cpan/Metadata
		4700 ./ruby-1.8.7.tar.gz
		4316 ./ruby-1.8.7/libruby-static.a
		3372 ./passenger-2.2.11/ext/apache2/ApplicationPoolServerExecutable
	#查找指定文件类型的文件：使用-type选项
	#根据文件修改时间查找
		#ls -lrt
	#指定查找某文件修改时间之前修改或者创建的文件
		#find -newer filename
	#根据文件大小查找
		#比如，查找大于20M的文件
			#find . -size +20M
		#查找小于1M的文件
			#find . -size -1M
#wget
	#通常下载单个文件的方式
		$wget http://hotfile.com/dl/97851370/9727f76/backups-DN22006-sUN.part03.rar	
	#下载一个和下载地址文件名不同的文件
		默认wget会自动分隔最后一个斜线的后面作为文件名，正常下载模式：
			$wget http://www.aaa.com/test/download.php?src_id=02
			下载后：
			$ls
			download_.php?src_id=02
		可以使用-O选项解决：
			$wget –O test.zip http://www.aaa.com/test/download.php?src_id=02
			下载后：
			$ls
			test.zip
	#指定下载速度
		$wget -limit-rate=100k http://limit.com/test.tar.gz
	#断点续传
		使用-c选项	
	#后台下载
		-b选项进行后台下载，wget在后台继续运行，并把输出写至"wget-log"，查看日志
		$tail -l wget-log	
	#当下载多个内容时，可以将这些地址放到一个文件中，然后下载这个文件。
		$cat download_file_list.txt
		url1
		url2
		url3
		...
		$wget -i download_file_list.txt
	#下载一个站点
		$wget --mirror -p -convert-links -P localhost www.tontin.me
	#限制下载的类型
		$wget -R *.jpg www.tontin.me
		$wget --reject=jpg www.tontin.me
	#记录下载日志
		$wget -o /var/log/wget.log www.tontin.me
	#仅下载某些类型的文件
		$wget -r -A *.pdf mirrors.sohu.com/ebook
		# -r recursive
		# -A --accept acclist
		# -A *.pdf will match file1.pdf, but also file2.PDF, if you use --ignore-case
	#使用用户名和密码下载文件，包括ftp和http
		$wget --user=USERNAME --password=PASSWORD www.tontin.me
		#these parameters can be overridden using the --ftp-user and --ftp-password options for FTP\
		# connections and the --http-user and --http-password options for HTTP connections.
