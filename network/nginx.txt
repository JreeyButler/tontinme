------keepalive connections
------nginx超时设置
------nginx last & break


#keepalive connections
	Activates the cache for connections to upstream servers.
	激活长连接设置，即启用长连接
	The connections parameter sets the maximum number of idle keepalive connections to upstream
	servers that are preserved in the cache of each worker process. When this number is exceeded,
	the least recently used connections are closed. 
	connections设置长连接的最大个数，当所有长连接都被占用时，按照LRU规则淘汰连接
	It should be particularly noted that the keepalive directive does not limit the total number
	of connections to upstream servers that an nginx worker process can open. The connections parameter
	should be set to a number small enough to let upstream servers process new incoming connections as well. 
	注意：该值并不限制nginx到upstream server的最大连接数(只是限制最大长连接数)，达到长连接的max后的新连接是短连接,
	该值建议设置的upstream server有足够能力处理来自其他方面的连接
#nginx超时设置
	1. send_timeout
	default:60
	Timeout is established not on entire transfer of answer, but only between two 
		operations of reading, if after this time client will take nothing, 
		then nginx is shutting down this connection
	即经过${send_timeout}时间后仍无请求该client，则nginx断开该连接
	2. fail_timeout和max_fails
	配合使用，来控制nginx怎样认为upsteam中的某个server是失效的.
	当在fail_timeout时间内，某个server连接失败了max_fails次，则nginx认为该server
		不工作了。同时，在接下来的fail_timeout时间内，nginx不再发送请求到该server
	3. proxy_connect_timeout & proxy_read_timeout
	connect_timout是连接client的超时时间，read_timeout是等待返回结果的超时时间
	proxy_read_timeout
		This directive sets the read timeout for the response of the proxied server. 
			It determines how long nginx will wait to get the response to a request.
			The timeout is established not for entire response. 
	proxy_connect_timeout
		Thie directive assigns a timeout for the connection to the proxyserver
		In contrast to connect_timeout, read_timeout will cache a server that puts your
			in it's connection pool but does not responds to you with anything beyond
			that
	4. 一些参数解释
	request_time
		指从从接收用户请求数据到发送完回复数据的时间
	upstream_response_time
		这个说的比较模糊，它指的是从Nginx向后端建立连接开始到接收完数据然后关闭连接为止的时间。
		因为会有重试，它可能会有多个时间段。一般来说，$upstream_response_time会比$request_time
		时间短
		对于http post请求，两者相差特别大。因为nginx会把http request body缓存住，接收完毕后才会
		把数据一起发给后端

#nginx last & break
	last	stops processing the current set of ngx_http_rewrite_module directives followed by 
			a search for a new location matching the changed URI
		停止当前这个请求，并根据rewrite匹配的规则重新发起一个请求。新请求又从第一个阶段开始执行
	break	stops processing the current set of ngx_http_rewrite_module directives
		相对last, break并不会重新发起一个请求，只是跳过当前的rewrite阶段，并执行本请求后续的执行阶段
	EXAMPLE:
	'''	server {
			listen 80 default_server;
			server_name dcshi.com;
			root www;
			
			location /break/ {
			    rewrite ^/break/(.*) /test/$1 break;
			    echo "break page";
			} 
			
			location /last/ {
			     rewrite ^/last/(.*) /test/$1 last;
			     echo "last page";
			}    
			
			location /test/ {
			   echo "test page";
			}
		} 
	'''
	请求:http://test.com/break/***
	输出:break page
		注:一般情况下，content阶段只能对应一个输出指令，如同一个location配置两个echo, 最终只有一个echo
			会被执行. 如果当你把break的echo注释,然后再次访问/break/***会报404，虽然break被定向到
			test但是break指令不会重新开启一个新的请求继续匹配请求:http://test.com/last/***
	输出:test page

