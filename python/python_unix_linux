#!/usr/bin/env python

#chapter 3
	#python的转义序列
		\	newline Ignored忽略换行符
		\\	Backslash反斜杠
		\'	Single quote单引号	'
		\"	Double quote双引号	"
		\a	ASCII Bell响铃
		\b	ASCII backspace退格
		\f	ASCII form fedd表格换行
		\n	ASCII line feed换行
		\N{name}	Unicode数据库中命名的字符（尽Unicode字符串）
		\r	ASCII carriage return回车
		\t	ASCII horizontal tab水平制表符
		\uxxxx	16位十六进制值表示的字符（仅Unicode）
		\Uxxxxxxxx	32位十六进制表示的字符（仅Unicode）
		\v	ASCII vertical tab 垂直制表符
		\ooo	八进制值表示的字符
		\xhh	十六进制值表示的字符
	#in & not in
		检查一个字符串是否是另一个字符串的一部分
	#find() & index()
		子串在字符串中出现的位置
			#若不是某字符串的子串，find()返回-1,index()抛出ValueError异常
	#string[index:] & string[:index]
		查找从index开始到string结尾的每一个字符，& 查找从string开始到index所在位子的所有字符
	#startswith() & endswith()
		判断字符串是否以某一特定字串开始，或是以某一特定子串结束
	#lstrip(),rstrip(),strip()
		不带任何参数时分别用来删除前导空白，结尾空白和前后空白的方法。
		空白可以包括tab,空格，回车和换行。
		它们都有一个可选参数，可以根据需要删除任何内容。
			eg1. some_example = "<some_tag>"
			     print some_example.lstrip("<")
			eg2. print some_example.lstrip("<").rstip(">")
			eg3. print some_example.strip("<>")
			注：eg3.中并不意味着将删除准确匹配的"<>"，而是可以删除任何"<"">"的组合
			eg4. foo_str = "<fooooo>blah<foo>"
			     print foo_str.strip("<foo>")
			     	'blah'
			注：eg4.中可以看到strip()删除了字符串中包含的全部5个字符
	#upper() & lower()
		返回字符串的大写/小写原始字符串
	#split() & splitlines() & join()
		根据某个指定的分隔符对一个字符串进行提取
		()内可以放0,1,2个参数
		splitlines()用于分割多行文本
		join()用于连接多个字符串 注：如果传递给join()的是一系列整数，需要稍作改变（P93）
		join()用于连接多个字符串	注：如果传递给join()的是一系列整数，需要稍作改变（P93）
	#replace()
		用于创建和修改文本字符
		与切分操作以及strip()方法一样，replace()会创建一个新字符串，而不是对字符串进行行内修改
	#unicode
		python可以对unicode进行处理
	#re，正则表达式
		基本正则表达式的使用
			import re
		python有两种使用正则表达式的方式
			1.直接使用re模块中的函数
			2.创建一个它编译的正则表达式对象，然后使用对象中的方法
		使用创建编译后的正则表达式可以缩短程序的运行时间
		四个常用的正则表达式方法
			findall()
			finditer()
			match()
			search()
	#findall()
		可以找到搜索字符串中指定模式的所有匹配
	#finditer()
		是对findall()的略微修改，finditer()返回一个迭代，每一次迭代的元素都是一个正则表达式匹配的对象。
		finditer()的每一项都是一个匹配对象，而不是对应于匹配文本的简单的字符串列表或是多元列表。
	#match() & search()
		二者的差异：match()从指定位置开始进行匹配，而不会移动到字符串的任何随机位置。但search()从指定\
				的位置开始搜索，在指定的位置结束搜索。
	#创建文件
		创建文件对象的目的是让你可以与磁盘上的这个文件进行交互。
		#open() & close()
		#with语句
			允许使用上下文管理器，具有方法__enter__() & __exit__()
	#读取文件
		#read() & readline() & readlines()
		read()	有可选参数定义读取的字节数
		readline()	可选参数size:定义readline()在返回一个字符串对象之前读取的最大字节数，而不论\
				是否达到了行的结尾。
		readlines()	读入文件中的所有行。可选参数sizehint:用于指定读入字符的大约总数
	#写文件
		#write() & writelines()
		write()	有一个参数：写入文件的字符串
		writelines()	必须有一个参数：writelines()要写入打开文件的序列，该序列可以是任何迭代对象类型。
	#标准输入和输出
		sys.stdin与可读文件对象具有相同的类型
		sys.stdout与可写文件对象具有相同的类型
		作为一个相关的方面，可读文件与可写文件共享相同的类型
	#StringIO
		如果需要将一个字符串作为文件来处理，StringIO会很有帮助
		urllib.urlopen()	从web服务器读取文件
	#日志解析
		
	#ElemntTree
		三种方法处理XML
			simple API for XML / SAX
			Document Object Model / DOM
			ElementTree
#Chapter 4 Documentation and Reporting
	#收取邮件
	#手工信息收集
		reStructureText(reST)
			$sudo yum install python-docutils
		Textile
			$sudo easy_install textile & $sudo yum install python-textile
			(附：安装easy_install	$sudo yum install python-setuptools.noarch)
	#信息格式化
		#graphical images
			import gdcharg	柱状图，饼图
		#PDF
			ReportLab PDF
	#信息发布
		#发送email
			低级别的smtplib		可以发送email
			email	帮助解析和产生email
		#发送带附件的email
	#Trac
		Trac是一个wiki和问题追踪系统。Trac是用python编写的，它非常适合我们所讨论的所有三个类别：信息\
				收集，格式化和发布。
#Chapter 5 Networking
	#网络客户端
		#socket
			socket(),connect(),send(),recv(),close()
		#httplib
		#ftplib
			全功能的ftp客户端库
		#urllib
		#urllib2
			是对urllib的扩展。例如能够更友好的支持认证和cookie
	#远程过程调用
		#XML-RPC
			XML-RPC在两个进程之间交换指定格式的XML文档，以实现远程过程调用。
			XML-RPC具有一些限制
		#Pyro
			Pyro是能够避免XML-RPC缺点的框架。Pyro(Python Remote Objects
			Pyro能完成任何XML-RPC能够实现的功能，而不需将对象字典化。
			Pyro仅能够与Python使用，XML-RPC也可以与其他语言一起使用。
		#SSH
			通过编写脚本来使用SSH协议，不仅能使用SSH协议的全部功能，还能够\
					使用Python的全部功能
		#Twisted
			Twisted是一个事件驱动的Python网络框架，可以处理大量与网络相关的任务类型
		#Scapy
			Scapy是一个非常便捷的交互式包操作程序和库。Scapy可以发现网络\
					执行扫描，跟踪路由并进行探测。
#Chapter 6 Data
	#使用os模块与Data进行交互
		os模块包含超过200个方法，并且这些方法中的大部分都能够进行数据处理。	
	#shutil
		该模块能够处理大规模数据。与OS模块相似，shutil模块具有复制，移动，重命名\
				和删除数据的方法。但是它可以在整个数据树上执行操作
		
