------mysql bin-log 清除(purge)
------mysql备份表
------mysql重置密码
------mysql的各种存储引擎介绍
------导出MySQL所有用户权限

#mysql bin-log 清除(purge)
	>purge {master | binary} logs to 'log_name'
	>purge {master | binary} logs before 'date'
	#example
	  >purge master logs to 'mysql-bin.002';
	  >purge master logs before '2010-12-31 24:00:00';
	  #清楚3天前的binlog
	  >purge master logs before date_sub(now(),interval 3 day);
	#如果您有一个活动的从服务器，该服务器当前正在读取您正在试图删除的日志之一，则本语句不会起作用，而是会\
		失败，并伴随一个错误。不过，如果从服务器是休止的，并且您碰巧清理了其想要读取的日志之一，则从服务器\
		启动后不能复制。当从服务器正在复制时，本语句可以安全运行，您不需要停止它们。
	#清理日志的步骤：
	1.在每个从服务器上，使用show slave status来检查它正在读取哪个日志。
	2.使用show master logs获得主服务器上的一系列日志
	3.在所有从服务器中判定最早的日志，这个是目标日志。如果所有的从属服务器是更新的，这是清单上的最后一个日志
	4.制作您想要删除的所有日志的备份
	5.清理所有的日志，但是不包括目标日志
#mysql备份表
	备份des-table表为tackup_des-table
	mysql>create table backup_des-table as select * from des-table;
#mysql重置密码
	$/usr/local/mysql/share/mysql/mysql.server stop
	$/usr/local/mysql/bin/mysqld_safe --user=mysql --skip-grant-tables --skip-networking &
	$/usr/local/mysql/bin/mysql -u root mysql
	mysql> update user set password=PASSWORD("newpassword") where user='root';
	mysql> flush privileges;
	mysql> quit
	$/usr/local/mysql/share/mysql/mysql.server restart
	$/usr/local/mysql/bin/mysql -u root -p
	#更优雅一点儿
	把用到的语句保存到一个文本文件中(比如/path/to/init/file)
	update user set password=PASSWORD("newpassword") where user='root';
	flush privileges;
	接着使用init-file参数启动mysql
	$/usr/local/mysql/share/mysql/mysql.server stop
	$/usr/local/mysql/bin/mysqld_safe --init-file=/path/to/init/file &
	此时，密码就已经被重置了。最后别忘了删除文件内容，以免密码泄漏
	官方关于mysql重置密码的介绍：http://dev.mysql.com/doc/refman/5.5/en/resetting-permissions.html
#mysql的各种存储引擎介绍
	mysql的存储引擎：
	  MyISAM,InnoDB,MERGE,MEMORY(HEAP),BDB(BerkeleyDB),EXAMPLE,FEDERATED,ARCHIVE,CSV,BLACKHOLE
	MyISAM
	  默认的MySQL插件式存储引擎
	InnoDB
	  用于事务处理应用程序，具有众多特性，包括ACID事务支持
	BDB
	  可替代InnoDB的事务引擎，支持COMMIT、ROLLBACK和其他事务特性
	Memory
	  将所有数据保存在RAM中，在需要快速查找引用和其他类似数据的环境下，可提供极快的访问
	Merge
	  允许MySQL DBA或开发人员将一系列等同的MyISAM表以逻辑方式组合在一起，并作为一个对象引用它们
	Archive
	  为大量很少引用的历史，归档，或安全审计信息的存储和检索提供了完美的解决方案
	Federated
	  能够将多个分离的MySQL服务器链接起来，从多个物理服务器创建一个逻辑数据库
	Cluster/NDB
	  MySQL的簇式数据库引擎，尤其适合于具有高性能查找要求的应用程序
	Other
	  其他存储引擎包括CSV(引用由逗号隔开的用作数据库表的文件),Blackhole(用于临时禁止对数据库的应用程序输入)\
		  以及Example引擎(可为快速创建定制的插件式存储引擎提供帮助)
#导出MySQL所有用户权限
	默认情况下，如果使用
	  select * from mysql.user;
	导出的只是全局权限，要想查看每个用户的具体权限，要使用
	  show grants for "user"@'host';
	导出mysql所有用户权限
	  #!/bin/bash
	  #function export user privileges
	  expgrants()
	  {
		mysql -B -u'root' -p'123456' -N $@ -e "SELECT CONCAT(
			'SHOW GRANTS FOR ''', user, '''@''', host, ''';'
			) AS query FROM mysql.user" | \
		mysql -u 'root' -p '123456' $@ | \
		sed 's/\(GRANT .*\)/\1;/;s/^\(Grants for .*\)/-- \1 /;/--/{x;p;x}'
	  }
	  expgrants > ./grants.sql
