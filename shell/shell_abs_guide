calalogue
------chapter 3 特殊字符
------chapter 4 变量和参数的介绍
------chapter 5 引用
------chapter 12 command substitution

#chapter 3 特殊字符
  ;	命令分隔符，可以用来在一行中来写多个命令
  ;;	终止"case"选项
  .	.命令等价于source命令
  .	.作为文件名的一部分。
  .	.字符匹配，在正则表达式中，用来匹配任何的单个字符。
  "	部分引用。"STRING"阻止了一部分特殊字符	"
  '	全引用。'STRING'阻止了全部特殊字符	'
  ,	逗号链接了一系列的算术操作，虽然里边所有的内容都被运行了，但只有最后一项被返回。
  	比如：
	  let "t2=((a=9, 15/13))"	#Set "a=9" and "t2=15/3"
  \	转移字符
  /	文件名路径分隔符，或用来做除法操作
  `	后置引用，命令替换			`
  :	空命令，等价于"NOP"(no op)，也可以被认为与shell内建命令(true)作用相同。
  	  :是一个bash的内建命令，它的返回值是0，就是shell返回的true
  !	取反操作符，将反转“退出状态”结果
  *	万能匹配字符，用于文件名匹配或正则表达式中
  *	数学乘法
  	**是幂运算
  ?	测试操作。在一个确定的表达式中，用?来测试结果
  	在“参数替换”中，?测试一个变量是否被set了
  ?	在file globbing中和在正则表达式中一样匹配任意的单个字符
  $	变量替换
  $	在正则表达式中作为行结束符
  ${}	参数替换
  $*,$@	位置参数
  $?	退出状态变量.$?保存一个命令/一个函数或脚本本身的退出状态
  $$	进程ID变量.这个$$变量保存运行脚本进程ID
  ()	命令组
  	如：
	  (a=hello;echo $a)
	注意：
	  在()中的命令列表，将作为一个子shell来运行
	  在()中的变量，由于是在子shell中，所以对于脚本剩下的部分是不可用的
	用在数组初始化
	  array=(element1,element2,element3)
  {xxx,yyy,zzz...}
  	大括号扩展
	注意：
	  在大括号中不允许有空白，除非这个空悲是有意义的
  {}	代码块，又被称为内部组。这个结构创建了一个匿名的函数，但是与函数不同是，\
	  在其中声明的变量，对于脚本其他部分的代码来说还是可见的。
  {} \;	路径名.一般都在find命令中使用，这不是一个shell内建命令
	注意：
	  ";"用来结束find命令序列的-exec选项
  []	test.
  	test的表达式将在[]中
	注意：
	  [是shell内建test命令的一部分，并不是/use/bin/test中的扩展命令的一个连接。
  [[]]	test.
  	test的表达式放在[[]]中。
  []	数组元素
  	  array[1]=slot_1
	  echo ${array[1]}
  []	字符范围
  	在正则表达式中使用，作为字符匹配的一个范围
  (())	数学计算的扩展
  >&>>&>><
  	重定向
	command&>2	重定向command的stdout到stderr
	scriptname&>filename	重定向stdout和stderr到文件中
  << 	重定向，用在"here document"
  <<<	重定向，用在"here string"
  <,>	ASCII比较
  \<,\>	正则表达式中的单词边界
  	  $grep '\<the\>' textfile
  |	管道
  >|	强制重定向，这将强制覆盖一个现存文件
  ||	或-逻辑操作
  &	后台运行命令
  &&	与-逻辑操作
  -	选项，前缀。在所有的命令内如果要想使用选项参数的话，前边都要加上"-"
  -	用于重定向stdin或stdout
  	  grep linux file1 | diff file2 -
  -	之前的工作目录
	  $cd -
	注意：
	  一定要和之前讨论的重定向功能分开
  -	算术减号
  =	算术等号
  +	算术加号
  +	选项，对于特定的命令来说使用"+"来打开特定的选项，用"-"来关闭特定的选项
  %	算术取模运算，也用在正则表达式中
  ~	home目录。相当于$HOME
  	  ~cinder是cinder的home目录
	  $echo ~cinder
	  /home/cinder
	  ~/就是当前用户的home目录
  ~+	当前工作目录，相当于$PWD变量
  ~-	之前的工作目录，相当于$OLDPWD内部变量
  =~	用于正则表达式，这个操作将在正则表达式匹配部分讲解，只有version3才支持
  ^	行首
  控制字符
  	Ctl-B	光标后退，这应该依赖于bash输入的风格，默认是emacs风格的
	Ctl-C	Break,终止前台工作
	Ctl-D	从当前shell登出(和exit很像)
		"EOF"(文件结束符)。这也能从stdin中终止输入
		在console或者在xterm window中输入的时候，Ctl-D将删除光标下字符
		当没有字符时，Ctrl-D将推出当前会话。在xterm window也有关闭窗口的效果
	Ctl-G	beep。在一些老的终端，将响铃
	Ctl-H	backspace,删除光标前边的字符
	Ctl-I	就是tab健
	Ctl-J	新行
	Ctl-K	垂直tab
		作用就是删除光标到行尾的字符
	Ctl-L	clear,清屏
	Ctl-M	回车
	Ctl-Q	继续（等价于XON字符），这个继续的标准输入在一个终端里
	Ctl-S	挂起，这个被挂起的stdin在一个终端里，用Ctl-Q恢复
	Ctl-U	删除光标到行首的所有字符,在某些设置下,删除全行
	Ctl-V	当输入字符时,Ctl-V允许插入控制字符
	Ctl-W	删除当前光标到前边的最近一个空格之间的字符
	Ctl-Z	终止前台工作
  注意事项:
  	[1]	shell做大括号的命令扩展,但是命令本身需要对扩展的结果作处理
	[2]	例外:在pipe中的一个大括号中的代码可能运行在一个子shell中
		$ls | {read first line; read secondline;}
		#错误,在大括号中的代码段将运行在子shell中,所以ls的输出将不能传递到代码块中.
	[3]	换行符也被认为是空白,因此一个空行也会被认为是空白

#chapter 4 变量和参数的介绍
  变量替换
	$var和${var}是不同的。不加{}在某些上下文将引起错误。
	在""中会发生变量替换，这叫做部分引用（弱引用）。在''中不会发生变量替换，这叫做全引用（强引用）.
	echo $var	输出var的值，并且忽略空格，换行等
	echo "$var"	输出var的值
	echo '$var'	输出$var
	bash中的变量都是无类型的
	脚本只能对它产生的子进程export变量。一个从命令行被调用的脚本中export的变量，不会影响调用该脚本的shell\
		环境。
		#$@等特定shell变量的含义
		$#      传递到脚本的参数个数
		$*      以一个单字符串显示所有向脚本传递的参数。与位置变量不同，此选项参数可超过9个
		$$      脚本运行的当前进程ID号
		$!      后台运行的最后一个进程的进程ID号
		$@      与$#相同，但是使用时加引号，并在引号中返回每个参数
		$-      显示shell使用的当前选项，与set命令功能相同
		$?      显示最后命令的退出状态，0表示没有错误，其他任何值表明有错误
#chapter 5 引用(此处特指引号)
  引号的特殊效果就是，保护字符串中的特殊字符不被shell或脚本重新解释或者扩展。
  引用的一个重要作用就是保护命令行中的参数，但还是允许正在调用的程序来扩展它。
  引用还可以抑制echo命令的换行作用
  单引号比双引号严格，在单引号中，$的特殊含义都被关闭了。
  转义字符\
	\的行为依赖于它是否被转义，被""，或者是否在"命令替换"和"here document"中
	\转义符也提供续行功能。如果在行尾加上\，那就会接受新行的输入，作为这一行的补充。
#chapter 6 退出和退出状态
  exit命令被用来结束脚本，它会返回一个值来传给父进程，父进程会判断是否可用。
  当一个脚本以不带参数exit来结束时，脚本的退出状态就由脚本中最后执行的命令来决定。
  注意：特定的退出码都有预定的含义，用户不应该在自己的脚本中指定它.
#chapter 7 Tests
  Bash具有test命令，不同的[]和()操作，和if/then结构。
  Test结构
	[]与test命令等价，但是出于效率的考虑，它是一个内建命令。
	test和[都是内建命令
		$type test
		type is a shell builtin
	新版的bash推出了一个新的[[...]]扩展test命令。"[["是一个关键字，并不是一个命令。
	((...))和let...结构常被用来做算数比较。
	if命令可以测试任何命令，不仅仅是括号中的条件。
	当if和then在一个条件测试的同一行中的话，必须用;来终止。if和then都是关键字，关键字（或者命令）作为一个
		表达式的开头，并且在一个新的表达式开始之前，必须结束上一个表达式。
  #注意：使用[[]]，而不是[]能够阻止脚本中的许多逻辑错误。比如，尽管在[]中将给出一个错误，但是&&,||,<>操作还是能\
	  	够工作在一个[[]]test中
  #注意：在if后面，test,[]和[[]]都不是必须的
  	eg.	dir=/home/cinder
		if cd "$dir" 2>/dev/null;then
			...
		if命令将返回if后面的命令的退出码
	与此相似，当使用与或列表结构时，test或[]的使用，也不一定非有if不可
  (())结构
  	扩展并计算一个算术表达式的结果。如果表达式的结果为0，它将返回1作为退出码，或者是"false"；而一个非0表达式\
	  	的结果将返回0作为退出码，或者是"true"
  文件测试操作
  	返回true,如果
  	-e	文件存在
	-a	文件存在 #与-e效果相同，已经被抛弃了
	-f	file是一个普通文件(不是目录或设备文件)
	-s	文件长度不为0
	-d	文件是个目录
	-b	文件是个块设备(软盘，cdrom等)
	-c	文件是个字符设备(键盘，modem，声卡等)
	-p	文件是个管道
	-h	文件是个符号链接
	-L	文件是个符号链接
	-S	文件是个socket
	-t	关联到一个终端设备的文件描述符
		这个选项一般都用来检测是否在一个给定的脚本中的stdin[-t0]或[-t1]是一个终端
	-r	文件具有读权限(对于用户运行这个test)
	-w	文件具有写权限(对于用户运行这个test)
	-x	文件具有执行权限(对于用户运行这个test)
	-g	set-group-id(sgid)标识到文件或目录上
		如果一个目录具有sgid标志，那么被创建在这个目录里的文件，属于创建这个目录的用户组，并不一定\
			与创建该文件的用户相同
	-u	set-user-id(suid)标志到文件上
		如果运行一个具有root权限的文件被标识suid，那么运行该文件将取得root权限，即使你是普通用户
		对于设置了suid的文件，其权限标志中含有"s"
	-k	设置粘贴位(sticky bit)
		如果对一个目录设置了粘贴位，则只有对该目录有写权限的用户在满足下列条件之一的条件下，才能\
			删除或更名该目录下的文件:
			拥有此文件
			拥有此目录
			是超级用户
	-O	你是文件的所有者
	-G	文件的group-id和你的相同
	-N	从文件最后被阅读到现在，是否被修改
	f1 -nt f2
		文件f1比f2新
	f1 -ot f2	
		文件f1比f2老
	f1 -ef f2	
		f1和f2都硬连接到同一文件
	!	非-反转测试结果(如果条件缺失，将返回true)
  其他比较操作符
    二元比较操作符
    	整数比较
	-eq	等于
	-ne	不等于
	-gt	大于
	-ge	大于等于
	-lt	小于
	-le	小于等于
	<	小于
	<=	小于等于
	>	大于
	>=	大于等于
	字符串比较
	=	等于
	==	等于（和"="等价）
		注意：==在[]和[[]]中的行为是不同的
		  [[ $a == z* ]]	如果$a以"z"开头(模式匹配)，那么将为true
		  [ $a == "z*" ]	如果$a等于z*(字符匹配)，那么将为true
		  [ $a == z* ]		file globbing和word splitting将会发生
		  [[ $a =="z*" ]]	如果$a等于z*(字符匹配)，那么结果为true		
	!=	不等于
	<	小于
	>	大于
	-z	字符串为"null",就是长度为0
	-n	字符串不为"null"

#chapter 12 command substitution
    Command Substitution reassigns the output of a command or even multiple commands; it literally plugs the command output into another context
    1.use backquotes(`...`)
            script_name=`basename $0`
        OR $(...) which is newer method than backquotes
            script_name=$(basename $0)
        command substitution invokes a subshell
    2.Even when there is no word splitting, command substitution can remove trailing newlines
        cd `pwd` vs cd "$PWD"   #http://tldp.org/LDP/abs/html/commandsub.html#COMMANDSUBREF
