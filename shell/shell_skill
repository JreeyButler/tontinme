------diff对比远程文件跟本地文件
------man介绍
------netstat查看系统中占用端口的进程
------ssh创建端口转发通道
------ssh挂载远程主机上的文件夹
------查看ASCII表
------查看某进程的具体路径
------重置终端
------更友好的显示当前挂载的文件系统
------快速备份一个文件
------利用中间管道嵌套使用ssh
------免密码ssh登录主机
------切换会上一个目录
------实时查看某个目录下的最新改动过的文件
------替换上一条命令中的一个短语
------以HTTP方式共享当前文件夹的文件
------以sudo运行上条命令
------用你最喜欢的编辑器来敲命令
------运行前一个shell命令，同时用"bar"替换掉命令行中的每一个"foo"
------在多台机器上并行执行命令/脚本
------在午夜执行某个命令
------在以普通用户打开的vim中保存一个root用户文件
------抓取linux桌面的视频

#diff对比远程文件跟本地文件
	$ssh user@host cat /path/to/remotefile | diff /path/to/localfile -
	-指从stdin读入
#man介绍
	man命令的第二个参数是区域码，用来区分索引词的范围，比如printf,在C标准库里面的printf跟bash当中的printf是不同的\
		前者的查询是man 3 printf，后者是man 1 printf。如果这个区域码省略，就会从1开始搜索，直到找到为止。
	$man man 可以看到详细的解释
	man 7 ascii		查看ASCII码表
	man 1 intor		一篇对从未接触过linux的用户的简明教程
	man 2 syscall		内核系统请求的列表，按内核版本注释分类，系统编程必备
	man 2 select_tut	关于'select()'系统请求的教程
	man 3 string		在<string.h>头文件内的所有函数
	man 3 stdio		关于<stdio.h>头文件的使用，标准输入/输出库的说明
	man 3 errno		所有'errorno'的取值及说明
	man 4 console_codes	linux的终端控制码及其使用解释
	man 4 full		介绍'/dev/full'这个总是处于“满“状态的提盘(对应/dev/null这个总是空的设备)
	man 5 proc		介绍'/proc'下的文件系统
	man 5 filesystems	各种linux文件系统
	man 7 bootparam		详细解释内核启动参数
	man 7 charsets		解释各种语言的编码集
	man 7 glob		解释glob文件名管理机制的工作过程
	man 7 hier		解释linux文件系统结构各个部分的作用
	man 7 operator		C语言的运算符的列表
	man 7 regex		介绍正则表达式
	man 7 suffixes		常见文件后缀名的列表跟解释
	man 7 time		linux的时钟机制解释
	man 7 units		数值单位及其数值的解释
	man 7 utf8		描述utf-8编码
	man 7 url		解释url,uri,urn等的标准
#netstat查看系统中占用端口的进程
	$netstat -tulnp
		-t	显示TCP连接信息
		-u	显示UDP连接信息
		-l	显示监听状态的端口
		-n	直接显示IP
		-p	显示相应的进程PID以及名称
	如果要查看关于sockets更详细的占用信息等，可以使用lsof工具
#ssh创建端口转发通道
	$ssh -N -L 2001:remotehost:80 user@somemachine
	这个命令在本机打开了2001端口，对本机2001端口的请求通过somemachine作为跳板，转发到remotehost的80端口上
#ssh挂载远程主机上的文件夹
	$sshfs name@server:/path/to/folder /path/to/mount/point
	该命令让你通过ssh加载远程主机上的文件系统为本地磁盘，前提是你需要安装fuse和sshfs这两个软件
	卸载的话使用fusermount
		$fusermount -u /path/to/mount/point
#查看ASCII表
	$man 7 ascii
#查看某进程的具体路径
	$ps aux | grep 'httpd' | grep -v grep | awk '{print $2}' | xargs -I {} -t ls -l /proc/{} | grep cwd
	先查找该进程的pid，然后到/proc/$pid下有一个cwd的文件夹，是该进程所在文件夹的链接，ls -l就能看到了
#重置终端
	$reset
	如果你不小心cat了某个二进制文件，很可能整个终端就傻掉了。这时敲入reset，就能恢复正常了。
	类似的还有
	  <ctrl+l> OR
	  $tput clear
#更友好的显示当前挂载的文件系统
	$mount | column -t
	column用于把输出结果进行列表格式化操作
#快速备份一个文件
	$cp filename{,.bak}
	这道命令把filename文件拷贝成filename.bak，filename{,.bak}这一段会被bash展开成filename filename.bak再\
		传给cp。
#利用中间管道嵌套使用ssh
	$ssh -t host_A ssh host_B
	理论上这个过程是可以无限嵌套的
#免密码ssh登录主机
	$ssh-copy-id remote-machine
	这个命令把当前用户的公钥串写入到远程主机的~/.ssh/authorized_keys内。
#切换会上一个目录
	$cd -
	-代表上一个目录的路径
#实时查看某个目录下的最新改动过的文件
	$watch -d -n 1 'df; ls -FlAt /path'
	更改path为想要监控的目录，watch是实时监控工具，-d会高亮显示变化的区域，-n 1参数表示刷新间隔为1s\
		df;ls -FlAt /path运行了两条命令，df是输出磁盘使用情况，ls -FlAt则列出path下所有文件
	ls -FlAt解释：
		-F	在文件后面加一个文件符号表示文件类型，共有*/=>@这几种类型
			*表示可执行文件，/表示目录，=表示socket接口，>表示门，@表示符号链接，|表示管道
		-l	以列表方式显示
		-A	显示全部文件
		-t	根据时间排序文件
#替换上一条命令中的一个短语
	$^foo^bar^
	在需要重复运行调试一道常常的命令，需要测试某个参数的石油，用这个命令会比较实用
	这道命令的原始样式应该是这样的：
		!!:s/foo/bar
#以HTTP方式共享当前文件夹的文件
	$python -m SimpleHTTPServer
	该命令执行后将在本机8000端口开放HTTP服务，在其他能访问本机的机器的浏览器打开http://ip:8000即打开一个\
		目录列表，点击即可下载。
#以sudo运行上条命令
	$sudo !!
#用你最喜欢的编辑器来敲命令
	command <CTRL-x CTRL-e>
	在已经敲完的命令后按<CTRL-x CTRL-e>，会打开一个你指定的编辑器（比如vim,通过环境变量$EDITOR指定）。\
	这特别适合那些参数异常复杂的程序。保存退出后自动执行这个程序。
	如果你特别喜欢别的编辑器，可以在~/.bashrc里面放上比如export EDITOR=nana的命令
#运行前一个shell命令，同时用"bar"替换掉命令行中的每一个"foo"
	$!!:gs/foo/bar 
#在多台机器上并行执行命令/脚本
	1.仍然利用for循环，只是把任务放在后台即可
		>for i in {100..135}; do 
		>{
		>	ssh 192.168.1.$i 'sh /home/cinder/test-ttm.sh >/home/cinder/test-ttm.log 2>&1;
		>	sleep 1;'
		>; }& done
	需要注意的是，这里不能把命令写在一行(如下)，否则可能仍然会串行
		>for i in {100..135}; do { ssh 192.168.1.$i 'hostname'; }&; done
	2.dsh (distributed shell)
		dsh [-m machinename | -a | -g groupname] [-r remoteshellname] [-c | -w | -i | -F forklimit ] -- commandline
		EXAMPLE:
		>dsh -m 192.168.1.100 -m 192.168.1.101 -c -r ssh -M -- 'sh test-ttm.sh'
		#-c 并行执行; -M 在标准输出上显示远程主机名
	具体命令查看man dsh
	3.pssh(parallel ssh program)
		pssh [-I] [-vAiIP]  [-h hosts_file] [-H [user@]host[:port]] [-l user] [-p par] [-o outdir] [-e errdir] [-t timeout]
			[-O options] [-x args] [-X arg] command ...
		>pssh -i -H host1 -H host2 -x "-O StrictHostKeyChecking=no -O UserKnownHostsFile=/dev/null -O
		>	GlobalKnownHostsFile=/dev/null" echo hi
		#-i display standard output and standard error as each host completes
		#-H hosts list
		#-x passes a extra ssh command-line arguments(不检查和保存host key)
	具体命令查看man pssh
#在午夜执行某个命令
	$echo cmd | at midnight
	说的是at这个组件，通常跟cron相提并论。at主要用于定时执行一次性任务，而cron执行周期性任务。
	关于at的详细，查看手册man at
#在以普通用户打开的vim中保存一个root用户文件
	:w !sudo tee %
	:w!{cmd} 让vim执行一个外部命令{cmd}，然后把当前缓冲区的内容从stdin传入
	tee是一个把stdin保存到文件的小工具
	%是vim中一个只读寄存器的名字，总保存着当前编辑文件的文件路径。
	所以执行这个命令，就相当于从vim外部修改了当前编辑的文件。
#抓取linux桌面的视频
	$ffmpeg -f x11grab -s wxga -r 25 -i:0.0 -sameq /tmp/out.mpg
	-f x11 grab 指定输入类型。因为x11的缓冲区不是普通的视频文件可以侦测的格式，必须指定后ffmpeg才知道如何获得输入。
	-s wxga 设置抓取区域的大小。wxga是1366*768的标准说法，也可以换成-s 800*600的写法
	-r 25 设置帧率，即每秒抓取的画面数
	-i:0.0 设置输入源，本地X默认在0.0
	-sameq 保持跟输入流一样的图像质量，以用来后期处理

