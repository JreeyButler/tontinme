#!/bin/sh

------/etc/fstab格式解释（附ulimit使用）
------/etc/security/limits.conf参数解释
#------/etc/sysconfig/iptables解释
------RHEL & CentOS YUM 免费源
------linux安全关机
------linux 光盘刻录软件包
------linux开机启动过程
------linux守护进程
------linux系统调用汇总
------linux下的硬链接和软连接
------linux下rws文件属性解释
------linux下用文件的inode删除文件
------linux运行级别
------loop device
------tmpfs
------查看是否为64位的cpu
------查看系统的发行版本
------查看系统的内核版本
------端口状态说明LISTENING,ESTABLISHED,TIME_WAIT,CLOSE_WAIT
------刻录设备检测

#/etc/fstab格式解释
	Example:
	  LABEL=/		/        	ext3    defaults     			1 1
	  /dev/sda1   		/boot        ext2    defaults,noatime     1 2
	  /dev/sda2   		none         swap    sw                   0 0
	  /dev/sda3   		/            ext3    noatime              0 1
	  /dev/cdrom  		/mnt/cdrom   auto    noauto,user          0 0

	1./dev/device就是对分区的描述，即需要挂载的设备,设备文件的路径
	2.mountpoint就是分区挂载点
	3.type指文件系统类型
	4.rules指挂载分区时mount所用的挂载选项，多个挂载选项之间用逗号分隔
	  auto		开机时自动挂载
	  default	按照大多数永久文件系统的缺省值设置挂载定义
	  noauto	开机时不自动挂载
	  noatime	不记录该分区中文件的访问时间，这个选项能够提高系统速度
	  nouser	只有超级用户可以挂载
	  ro		按只读权限挂载
	  rw		按可读可写权限挂载
	  user		任何用户都可以挂载
	  noexec	不允许可执行文件执行(注意不要把根分区挂为noexec，那样会导致系统无法使用)
	  nodev		不允许挂载设备文件
	  nosuid,nosgid	不允许有suid和sgid属性
	 注意光驱只有在装有介质时才可以进行挂载，因此它是noauto
	 5.0是指dump(系统备份工具)。这一项为0，就表示从不备份。如果上次使用dump备份，将显示备份至今的天数
	 6.order指fsck(决定系统非正常关机后文件系统的检查顺序)。为0就表示不检查，(/)分区永远都是1，其他的分区只能从2开始，\
		 当数字相同时就同时检查（但不能有两个1）。如果不需要文件自检的话设置为0
#/etc/security/limits.conf参数解释（附ulimit使用）
	<domain>      <type>  <item>         <value>
	1.domain
	  <domain> can be:
        	- an user name
        	- a group name, with @group syntax
        	- the wildcard *, for default entry
        	- the wildcard %, can be also used with %group syntax,for maxlogin limit
	2.type
	  <type> can have the two values:
        	- "soft" for enforcing the soft limits
		  #指当前系统的设置值
        	- "hard" for enforcing hard limits
		  #表明系统中所能设定的最大值，soft的限制不能比hard限制高
		#用-就表示同时设置了soft和hard的值
	3.item
	  <item> can be one of the following:
	        - core - limits the core file size (KB)
	        - data - max data size (KB)
	        - fsize - maximum filesize (KB)
	        - memlock - max locked-in-memory address space (KB)
	        - nofile - max number of open files
	        - rss - max resident set size (KB)
	        - stack - max stack size (KB)
	        - cpu - max CPU time (MIN)
	        - nproc - max number of processes
	        - as - address space limit
	        - maxlogins - max number of logins for this user
	        - maxsyslogins - max number of logins on the system
	        - priority - the priority to run user process with
	        - locks - max number of file locks the user can hold
	        - sigpending - max number of pending signals
	        - msgqueue - max memory used by POSIX message queues (bytes)
	        - nice - max nice priority allowed to raise to
	        - rtprio - max realtime priority
	#要使limits.conf文件配置生效，必须要确保pam_limits.so文件被加入到启动文件中。
	  echo "session required /lib/security/pam_limits.so" >> /etc/pam.d/login
	  #64位系统可能是下面一行
	  echo "session required /lib64/security/pam_limits.so" >> /etc/pam.d/login
	  #暂时地，适用于通过ulimit命令登录shell会话期间
	  #永久的，通过将一个相应的ulimit语句添加到由登录shell读取的文件之一（例如:~/.profile）
	#ulimit使用参数说明
	  -a	列出所有当前资源极限
	  #其他参数的说明参见"$ulimit -a"给出的注释
	  #example
	  $ulimit -u 10000	#设置各linux用户的最大进程数
	  $ulimit -n 10000	#设置每个进程可以打开的文件数
	  $ulimit -d unlimited	#数据段长度
	  $ulimit -m unlimited	#最大内存大小
	  $ulimit -s unlimited	#堆栈大小
	  $ulimit -t unlimited	#CPU时间
	  $ulimit -v unlimited	#虚拟内存
#/etc/sysconfig/iptables解释
	
#RHEL & CentOS YUM 免费源
	#网易163源
		以超级用户登路
		先关闭fastestmirror
		$vi /etc/yum/pluginconf.d/fastestmirror.conf     
		and set “enable=0″
		$cd /etc/yum.repos.d/
		wget http://mirrors.163.com/.help/CentOS-Base-163.repo
		yum makecache
		yum update
		now enjoy it！
	#http://apt.sw.be 
		perl模块包非常全
		安装方法(64bit):rpm -Uhv http://apt.sw.be/redhat/el5/en/x86_64/rpmforge/RPMS/rpmforge-release-0.5.2-2.el5.rf.x86_64.rpm
	#http://download.fedora.redhat.com
		开源软件非常丰富，比如puppet,nagios等
		安装方法(64bit):rpm -Uvh http://download.fedora.redhat.com/pub/epel/5/x86_64/epel-release-5-4.noarch.rpm
	#Atomic Yum Repository(http://www.atomicorp.com/)
		更新速度较快
		安装方法:首先下载http://www.atomicorp.com/installers/atomic文件，然后执行 sh ./atomic就会自动将repo文件安装好
	#utterramblings Repository(http://www.jasonlitka.com/)
		更新速度较快
		安装方法:    
		vi /etc/yum.repos.d/utterramblings.repo，加入如下内容
		[utterramblings]
		name=Jasons Utter Ramblings Repo
		baseurl=http://www.jasonlitka.com/media/EL$releasever/$basearch/
	        enabled=1
		gpgcheck=1
	        gpgkey=http://www.jasonlitka.com/media/RPM-GPG-KEY-jlitka
		保存退出即可
#linux安全关机
	键盘上有一个"Sys Rq"的键，在台式机的键盘上通常与"Print Screen"共健，在笔记本上可能在其他位置，\
		Delete。以台式机为例，要使用这种方法需要按住Alt-Print(Sys Rq)，然后依次按下reisub这\
		几个键，按完b系统就会重启。
	解释一下：按住Alt-Print的时候就相当于按住了Sys Rq键，这个时候输入的一切都会直接由linux内核来处理\
		它可以进行许多低级操作。这个时候reisub中的每一个字母都是一个独立操作，分别表示：
		unRaw		将键盘控制从X Server那里抢回来
		tErminate	给所有进程发送SIGTERM信号，让它们自己解决善后
		kIll		给所有进程发送SIGKILL信号，强制他们马上关闭
		Sync		将所有数据同步至磁盘
		Unmount		将所有分区挂载为只读模式
		reBoot		重启
	这6个字母的顺序可以这样记，单词busier(busy的比较级)反过来。
#linux 光盘刻录软件包
	cdrecord-2.01-10
	dvd+rw-tools-7.0-0.el5.3
	mkisofs-2.01-10
#linux开启启动过程
	加载内核
		此时计算机内存中还不存在任何操作系统，内核必须完整的加载到可用RAM的第一个兆字节内。为了\
			实现这个目的，内核是被压缩了。
	执行内核
		内核在内存中解压缩之后，就可以开始运行了。内核启动运行，挂载根文件系统，启动init进程
	init进程
		init的配置文件是/etc/inittab(/etc/init)	
	rc命令脚本程序
		/etc/rc.local中的命令脚本在引导过程的最后一步执行
#linux守护进程
	守护进程(daemon)是运行在后台的一种特殊进程。它独立于控制终端并且周期性的执行某种任务或等待处理某些发生\
		的事件。Linux的大多数服务器都是用守护进程实现的。
		比如，internet服务器inetd，web服务器httpd。同时，守护进程完成许多系统任务，比如crond，打印任务lpd等
#linux系统调用汇总
	NAME		FUNCTION			MODULE
	restart_syscall
	exit		终止进程			进程控制
	fork		创建进程			进程控制
	read		读文件				文件控制
	write		写文件				文件控制
	open		打开文件			文件控制
	close		关闭文件			文件控制
	waitpid		等待指定的子进程结束		进程控制
	creat		创建文件			文件控制
	link		创建链接			文件控制
	unlink		取消链接			文件控制
	execve		运行可执行文件			进程控制
	chdir		改变当前工作目录		文件控制
	time		取得系统时间			系统控制
	mknod		创建索引节点			文件控制
	chmod		改变文件方式			文件控制
	lchown		参照chown			文件控制
	break		估计应该是被brk这个系统调用替代了内存管理
	oldlstat		
	lseek		移动文件指针			文件控制
	getpid		获取进程标识号			进程控制
	mount		安装文件系统			文件控制
	umount		卸载文件系统			文件控制
	setuid		设置用户标识号			用户管理
	getuid		获取用户标识号			用户管理
	stime		设置系统日期和时间		系统控制
	ptrace		进程跟踪			进程控制
	alarm		设置进程的闹钟			系统控制
	oldfstat
	pause		挂起进程，等待信号		进程控制
	utime		改变文件的访问修改时间		文件控制
	stty		未实现
	gtty		未实现
	access		当前进程对于文件的可存取性	系统控制
	nice		调整调用进程的优先级		进程控制
	ftime		未实现				
	sync		无参数，将内存缓冲区数据写回硬盘 内存管理
	kill		向进程或进程组发信号		进程管理
	rename		文件改名			文件控制
	mkdir		创建目录			文件控制
	rmdir		删除目录			文件控制
	dup		复制已打开的文件描述符		文件控制
	pipe		创建管道			管道
	times		取进程运行时间			系统控制
	prof		未实现				
	brk		改变数据段空间的分配		内存管理
	setgid		设置当前进程的组标识号		用户管理
	getgid		获取当前进程的组标识号		用户管理
	signal		参见signal			信号
	geteuid		获取当前进程的有效用户标识号	用户管理
	getegid		获取当前进程的有效组标识号	用户管理
	acct		启用或禁止进程记账		系统控制
	#mknod内容
		用于创建特殊文件，linux内有一个同名的命令，用于封装这个功能。通过\
			这个系统调用可以创建块专用文件、字符专用文件以及FIFO命名管道。
	#break相关内容
		这个应该被brk替代了，没有找到网上有break这个系统调用的介绍
	#lstat
		对于link文件返回link文件本身的信息，而不是所指向的文件
	#fstat
		使用fd而不是文件名路径作为参数
	#为了支持64位系统，Linux增加了几个64bit版本的stat系统调用
		stat64,fstat64,lstat64
	#linux0.12中定义了许多系统调用，相当多没有实现，应该是考虑向后兼容一些UNIX功能
	#这个页面列出了linux2.6定义仍然没有实现的系统调用
		http://www.kernel.org/doc/man-pages/online/pages/man2/mpx.2.html
		afs_syscall,  break,  ftime, getpmsg, gtty, lock, madvise1, mpx, \
			prof, profil,putpmsg, security, stty, tuxcall, ulimit, vserver
	#其中还提供了一些有用的信息：
		ftime,profil,ulimit这几个系统调用在用户空间以lib的方式实现了，因此\
			没有必要提供系统调用
		一些系统调用只有在特定的CPU上支持：alloc_hugepages,free_hugepages,ioperm,\
			ioperm,iopl,vm86
		一些系统调用只有打开了编译选项才会包括进来（比如：ipc,create_module,\
			init_module,delete_module）
	#dup
		请移步：http://blog.csdn.net/AllanZeng/archive/2009/06/12/4264111.aspx
	#有关effective ID和Real ID的区别
		请移步：http://whatilearned2day.wordpress.com/2007/01/09/uid-gid-real-and-effective-difference/	
#linux下的硬链接和软连接
	#inode	
		inode是linux中记录文件信息的一种数据结构，每个文件都有一个inode，其中存放了这个文件的各种信息,\
			以及文件的存储位置
		以硬盘为例，硬盘进行分区之后，一部分是inode区，一部分是block区。后者存放数据，前者存放block区中\
			每个文件的inode	。每个文件都有自己的inode
		$ls -li	查看文件的inode编号（第一项是inode编号，第二项是该文件拥有的硬链接数）
	#硬链接
		ln source hardlink_of_source 
		创建硬链接后，source和hardlink_of_source具有相同的inode编号及文件属性，并且硬链接数相同.
		修改source_of_source的内容，source的内容会跟着改变
		因此我们可以这样认为，为文件a增加一个硬链接，只是让a的inode结构中的硬链接数目增加1，并没有为硬\
			链接文件产生一个inode。无论删除source还是source_of_hardlink，只会使硬链接数减1，减到0时,\
			文件才会被删除
		硬链接不能跨设备建立
	#软链接(符号链接)
		ln -s source softlink_of_source
		创建软链接后inode编号不同，文件属性不同，硬链接数均为1，而且softlink_of_source右边显示->，指向source
		修改其中之一的内容，另一个的内容会跟着改变，这点和硬链接一样。
		但是如果把source删了，softlink_of_source会访问出错
		软链接可以跨设备建立
#linux下rws文件属性解释
	有些时候可能需要将文件的权限设置成rws属性。
		比如普通用户执行/usr/bin/crontab时，需要将属性设置为rwsr-sr-x才可以。
	有这个's'属性的档案可以让一般的使用者去share,动一些root才可以动的档案。例如有些系统的passwd指令就有's'\
		属性.本来/etc/passwd是只有root才可以修改，而设置为rws属性后，普通用户在执行时会将执行的使用者\
		本身setuid设置为0，也就是成为root等效使用者，这样就有能力去修改/etc/passwd了。当然执行完passwd\
		后，使用者uid又变回原先的值了。
#linux下用文件的inode删除文件
	如果不小心创建了含有特殊字符的文件和目录，比如带有?*^的文件名，就很难删除
	#找出文件和目录的inode
		stat & ls -il
	#通过inode删除该文件
		find . -inum [inode num] -exec rm -i {} \;
#linux运行级别
	run level 0	是作关机用的，一开机就会作关机的动作
			(Do not set initdefault to this or the server will shut down immediately after \
				finishing the boot process)
	run level 1	Single user mode模式，只允许root登录，主要做一些系统维护的工作
	run level 2	所有用户可以登录，但不会启动NFS working，即没有网络功能
	run level 3	所有用户可以登录，并拥有完整的功能。但开机后是文本模式
	run level 4	使用者自定义，但是默认情况下和run level 3完全相同
	run level 5	和run level 3几乎一样，但是是图形界面
	run level 5	重启，开机后立刻重启
			(Do not set initdefault to this or the server machine will confinuously reboot\
				at startup)
	/sbin/chkconfig改变进程运行级别
#loop device
	我们平时挂载一个img文件一般是通过mount -o loop来挂载，而它实际上等价于下面两步:
	$losetup /dev/loop0 example.img
	$mount /dev/loop0 /home/you/dir
	第一步是把文件和某个空闲的loop设备相关联起来，这里是/dev/loop0。用的是系统调用ioctl(LOOP_SET_FD),这样\
		以来对/dev/loop0的读写就会转换为对example.img的读写了
	第二步就容易理解了，和挂载普通块设备没什么区别了。mount之所以和两步为一步是想省去手工搜索空闲的loop设备
#tmpfs
	tmpfs is a file system which keeps all files in virtual memory
	tmpfs中的文件都是临时的，即不写入磁盘.如果你umount tmpfs实例，那么其中的所有数据都将丢失
	tmpfs puts everything into the kernel internal caches and grows and shrinks to accommodate the files \
		it contains and is able to swap unneeded pages out to swap space. It has maximum size limits\
		which can be adjusted on the fly via 'mount -o remount ...'
	tmpfs vs ramfs
		ramfs is the template to create tmpfs
	tmpfs vs RAM disk(/dev/ram*)
		RAM disk simulates a fixed size hard disk in physical RAM, where you have to create an ordinary\
			filesystem on top. Ramdisks cannot swap and you do not have the possibility to resize them
	glibc 2.2 and above expects tmpfs to be mounted at /dev/shm fr POSIX shared memory
	some people find it very convenient to mount it e.g. on /tmp and /var/tmp and have a big swap partition.\
		and now loop mounts of tmpfs files do work
	tmpfs has three mount options for sizing:
		size:		The limit of allocated bytes for this tmpfs instance.
				The default is half of your physical RAM without swap
				If you oversize your tmpfs instance the machine will deadlock since the OOM handler will\
					not be able to free the memory
		nr_blocks:	The same as size, but in blocks of PAGE_CACHE_SIZE
		nr_inodes:	The maximum number of inodes for this instance
				The default is half of number of yor physical RAM pages, or(on a machine with \
					highmem)the num of lowmem RAM pages
	#example
		$mount -t tmpfs -o size=10G, nr_inodes=10k, mode=700 tmpfs /mytmpfs
		tmpfs instance on /mytmpfs which can allocate 10GB RAM/SWAP in 10240 inodes and it is only accessible by root
#查看是否为64位的cpu
	#打入以下命令
	$grep flags /proc/cpuinfo
	输出：
	flags : fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov \
		pat pse36 clflush dts acpi mmx fxsr sse sse2 ss ht tm nx lm
	如果找到lm，说明你的cpu是64位的.
	lm	Long Mode —— 64位CPU
	rm	Read Mode —— 16位CPU
	pm	Protected Mode —— 32位CPU
#查看系统的发行版本
	$lsb_release -a
#查看系统的内核版本
	$uname -a
#端口状态说明LISTENING,ESTABLISHED,TIME_WAIT,CLOSE_WAIT
	TCP状态转移要点
	  TCP协议规定，对于已经建立的连接，网络双方要进行四次握手才能成功断开连接，如果缺少了其中某个步骤，\
	  	将会使连接处于假死状态，连接本身占用的资源不会被释放。
	LISTENING状态
	  FTP服务启动后首先处于侦听(LISTENING)状态
	ESTABLISHED状态
	  ESTABLISHED的意思是建立连接，表示两台机器正在通信
	CLOSE_WAIT
	  对方主动关闭连接或者网络异常导致连接中断，这时我方的状态会变成CLOSE_WAIT，此时我方要调用close()来\
	  	使得连接正确关闭
	TIME_WAIT
	  我方主动调用close()断开连接，收到对方确认后状态变为TIME_WAIT，TCP协议规定TIME_WAIT状态会一直持续\
	  	2MSL(即两倍的分段最大生存期)，以此来确保旧的连接状态不会对新连接产生影响。处于TIME_WAIT状态\
		的连接占用的资源不会被内核释放，所以作为服务器，在可能的情况下，尽量不要主动断开连接，以减少\
		TIME_WAIT状态造成的资源浪费
#刻录设备检测
	cdrecord -scanbus	#用于SCSI光驱
	cdrecord -scanbus dev=APAPI
