------kvm
------lxc
------vagrant
------docker
------geard
------openshift
------cgroup
------difference between lxc & docker
------difference between lxc & kvm

#difference between lxc & docker
    Docker is not a replacement of lxc. lxc refers to capabilities of the linux kernel(sepcifically 
	  namespaces and control groups) which allow sandboxing processes from one another, and controlling
	  their resource allocations.
    On top of this low-level foundation of kernel features, Docker offers a high-level tool with several
	  powerful functionlities.
    1) Portable deployment across machines. Docker defines a format for bundling an application and all its
	  dependencies into a single object which can be transferred to any docker-enabled machine. and executed
	  there with the guarantee that the execution environment exposed to the application will be the same.
    Lxc implements process sandboxing, which is an important pre-requisite for portable deployment, but that 
	  alone is not enough for portable deployment.
    2) Application-centric. Docker is optimized for the deployment of applications, as opposed to machines. 
	  This is reflected in is API, user interface, design philosophy and documention. By contrast, the lxc helper
	  scripts focus on containers as lightweight machines - basically servers that boot faster and need less
	  ram.
    3) Automatic build. Docker includes a tool for developers to automatically assemable a container, inspecting 
	  the diff between versions, committing new versions, rolling back etc.
    4) Components re-use. Any container can be used as an "base image" to create more specialized components. This 
	  can be done manually or as part of an automated build.
    5) Sharing. Docker has access to a public registry where thousands of people have uploaded useful containers.
    6) Tool ecosystem. Docker defines an API for automating and customing the creation and deployment of containers.
	  There are a huge number of tools integrating with docker to extend its capabilities.

    List of Docker's technical features.
    a) Filesystem isolation: each process container runs in a completely seperate root filesystem
	  Provided with plain LXC.
    b) Resource isolation: ...
	  Provided with plain LXC
    c) Network isolation: ...
	  Provided with plain LXC
    d) Copy-on-write: root filesystems are created using copy-on-writed, which make deployment extremely fast, memory-cheap
	  and disk-cheap.
	  This is provided by AUFS, a union filesystem that Docker depends on. you could set up AUFS yourself manually with   
		LXC, but Docker use it as a standard.
    e) Logging: the standard streams(stdin/stdout/stderr) of each process container is collected and logged for real-time 
	  or batch retrieval.
	  Docker provided this.
    f) Change management: changes to a container's filesystem can be committed into a new image and re-used to create more
	  container. No templating or manual configuration required.
	  "Templating or manual configuration" is a reference to LXC. where you would need to learn about both of these things.
	  Docker allows you to treat containers in the way that you're used to treating virtual machines, without learing 
	  about LXC configuration.
    g) Interactive shell: docker can allocate a pseudo-tty and attch to the standard input of any container, for example to 
	  run a throwaway interactive shell.
	  LXC already provides this.
#difference between lxc & kvm
    The main difference between the KVM virtualization and Linux Containers is that
	  virtual machines require a separate kernel instance to run on, while containers
    	  can be deployed from the host operating system. This significantly reduces the 
    	  complexity of container creation and maintenance. Also, the reduced overhead lets
    	  you create a large number of containers with faster startup and shutdown speeds.
    	  Both Linux Containers and KVM virtualization have certain advantages and drawbacks
    	  that influence the use cases in which these technologies are typically applied:

    1) KVM virtualization

    KVM virtualization lets you boot full operating systems of different kinds, even non-Linux systems.
	  However, a complex setup is sometimes needed. Virtual machines are resource-intensive 
	  so you can run only a limited number of them on your host machine.
    Running separate kernel instances generally means better separation and security. If one of
	  the kernels terminates unexpectedly, it does not disable the whole system. On the other hand,
	  this isolation makes it harder for virtual machines to communicate with the rest of the system,
	  and therefore several interpretation mechanisms must be used.
    Guest virtual machine is isolated from host changes, which lets you run different versions
	  of the same application on the host and virtual machine. KVM also provides many useful
	  features such as live migration. For more information on these capabilities, see
	  Red Hat Enterprise Linux 7 Virtualization Deployment and Administration Guide.

    2) Linux Containers:

    The current version of Linux Containers is designed primarily to support isolation of one
	  or more applications, with plans to implement full OS containers in the near future.
	  You can create or destroy containers very easily and they are convenient to maintain.
    System-wide changes are visible in each container. For example, if you upgrade an
	  application on the host machine, this change will apply to all sandboxes that run instances of this application.
    Since containers are lightweight, a large number of them can run simultaneously on a
	  host machine. The theoretical maximum is 6000 containers and 12,000 bind mounts of
	  root file system directories. Also, containers are faster to create and have low startup times.
