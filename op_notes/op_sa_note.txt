------大型互联网公司(百度)运维体系
------应用运维和系统运维

#大型互联网公司(百度)运维体系

第一个是运维的日常工作：
	1. 突发流量，这个需要及时的进行流量调度，以及排查为什么会有突发流量，是某个新的上线导致还是由于配置错误还是运营推广。
	2. 复杂环境关联。这个其实是最重要的，在一个复杂的系统环境中会有很多层次，我们要了解每个层次之间的关联，以
		及每个层次的性能。所以一个完整的系统逻辑框架图和物理框架图是很有必要的。 3. 快速开发并上线。这个是由
		于互联网的特性造成的，我们什么都是讲究一个快字，快速开发，快速部署，快速增长，快速下线。

第二个是整体运维的框架：
	1. 容量管理
	2. 关联关系
	3. 任务管理
	4. 自动部署
	5. 分布式集群和传统集群
	6. 机器管理
	要在一开始为这6项做好流程化和监控管理，同时最后要贯穿安全检测和灾难管理。

具体到运维框架里的自动化监控
	数据采集：
	1. 数据采集（主动提交到中心服务器上）： 在client端部署公共插件和自定义脚本的一些监控
	2. 服务器状态检测（由中心服务器隔时间去检测）： 这个主要是中心服务器去检测服务器上的服务状态和程序状态，以及用户
		访问的质量 3. 第三方信息：这个主要是跟公司内部系统相关联
	数据处理：
	1. 复杂计算：因为有些监控阈值不是单独一个值就能判定这个是否有问题，而是通过多个监控值进行计算后才能确定是否有故障
	2. 阈值判别
	3. 智能分析：这个是分析到底是什么导致了这个故障，为后面做故障自动恢复打下基础。
	报警和联动：
	1. 报警策略：这个主要是报警的阈值和去重报警。当一台服务器挂掉的时候，那一般情况这个服务器上所有报警都会发出来，但
		是这个时候其实就报一个服务器down就可以了。 
	2. 联动处理：由于一个服务的问题可能导致其它问题的产生，这个时候需要了解系统的逻辑架构和关联关系才能知道。
	3. 报警跟踪：跟踪问题的处理过程和结果，时间等信息
	4. 问题管理：每个问题都有各种各样的原因产生的，这个可以汇总整理

完整的监控内容：
	1. 域名监控：看看dns解析是否正确，这个百度吃过大亏的
	2. 流量监控：主要是某个区域和全网流量是否有异常。
	3. 访问质量监控：通过对于前端服务器的流量镜像分析来判定网络质量值否正常。也有是从本地通往远程是否网络路由是否正常。
		也可以使用networkbench和gomez这种第三方监测来发现。 4. 语义监控：就是对于页面中的关键字进行监控
	5. 基础监控：系统的状态，cpu, load等等
	6. 端口监控：telnet到机器的服务端口看看是否正确返回
	7. 结构体监控： 这个是当某个进程还在系统中存在，端口也存活，但是无法正常服务的情况下进行监控。可以模拟程序请求这个
		进程，看是否能正常工作并返回正确的值。 8. 模块监控
	9. 日志监控：对于机器的错误日志，访问日志等信息进行监控
	10. 自定义监控：
	其实以上所有的监控的最终目的就是要发现对于用户的影响是什么？
	
具体到具体的语义监控内容：
	1. 语义监控（页面监控）：其实就是通过get页面然后判断页面是否有预定义的关键字。
	2. 高级语义监控（面向功能）：这个是为了监控页面中多个模块是否正常。这个需要在html对于不同的功能定义标签开始符和结
		束符，这样通过get这个面后看看标签之间是否数据存在就知道页面功能是否正常。

监测各地用户访问质量：
	1. 各地访问速度：这个基本需要在当地部署机房后才能测定，也有用networkbench和gomez来测量的。
	2. 各地流量
	3. 机房带宽使用
	4. 各地DNS速度

对于模块的监控：
	1. 程序自身占用的资源是否合理
	2. 程序的性能表现是否正常
	3. 该程序的分支是否正常
	
基础监控：
	1. CPU资源占用： 这个就看CPU到底是多少核了，不能一定说多少
	2. 内存使用：这个要看实际使用的，不能算上buffer和cache，因为Linux系统默认是利用完所有的内存的
	3. 文件句柄的使用
	4. 网络句柄
	5. 各种状态的进程数

服务监控标准：
	1. 数据加载情况
	2. 模块处理能力
	2.1 平均耗时
	2.2 队列长度
	2.3 线程池使用率
	3. 模块间通讯状态
	3.1 平均连接时间
	3.2 读写错误数

异常根源分析：
	1. 关联关系查询
	2. 模块关联探测
	3. 服务器关联状态探测
	4. 网络关联探测
	5. 波动性预警
	
联动处理：
	1. 流量切换预案
	2. 服务器重启
	3. 磁盘数据清理
	4. 执行用户自定义命令

报警去重：
	1. 服务器维度
	2. 策略维度
	3. 多维度
	4. 计算同策略两次连续报警的时间间隔
	5. 最大等待时间

#应用运维和系统运维

	运维工作对于很多人来说其实就是看一个看说明书的工作。从man page到各种软件的readme，install file都要看。理论上
	看着挺简单的。但是接触多了这就分了应用运维和系统运维。
	
	我这2个都做过。老实说系统运维是更轻松的，毕竟系统级别的改变一般是比较少的，比如碰到系统内核升级，centos版本
	升级，数据库版本升级，CDN改造这些不是一直要做的事情。这是一个长期过程。系统级别的更改往往是非常慎重的，得经
	过非常多的测试，比较和优化才可以进行上线。
	
	系统运维首先需要保证的就是系统的稳定性，毕竟所有应用都是架设在系统平台上的。所以系统运维既是一个基础的工作，
	又是一个非常重要的工作。说基础是因为它是一切应用的基础的，说重要是因为要是系统不稳定，那何谈应用的稳定性呢？
	系统稳定性，这个基本是由于驱动导致的，有些驱动问题在一般情况是看不到的，但是一旦在高并发的情况下，比如AS5对
	于某些品牌的网卡在大流量下网卡会崩溃掉。还好linux的驱动开发者还是非常热心的，一般很快有patch会出来。但是还
	是由于我们测试不够仔细才会有这样的问题产生。
	
	系统的优化也是非常重要的，曾经有个以前同事说他们的游戏服务器压力很大，主要的压力是在io上，其实就是磁盘上。
	vmstat看到io部分值非常高。这个有应用导致的，也有系统平台和系统软件导致的。比如这个问题就是由于使用sendfile
	读写大文件，而改成使用普通的read方法就立刻降下来了。但是有时候还有缓存读写等等原因。另外一个优化是对于系统
	参数和网络参数的优化。其实这些都是要根据这个服务器具体跑什么应用来决定的。
	
	下面说下当初做应用运维的日子。在那个SNS网站的日子，我就彻底经历过了。应用运维是要保证应用层的稳定性。但是
	对于大型SNS网站，网站更新是一个常态的过程。于是你就会发现发布成为一个天天进行的东西。但是发布和到底怎么发？
	发了后的预期结果是什么？到底会对现有应用有什么副作用？这次发布是代码的发布还是一个新的应用组件的发布？
	
	于是应用运维首先要建立一个严格化的发布和测试流程。但是有时候开发会用点非常新的软件为了实现产品需求，但是应
	用运维如果不知道这个东西，那一旦出了问题你就没法一下子确定问题的症结就麻烦了，特别是对应用的稳定性造成影响
	后，那你身上的压力就特别大了。
	
	这次velocity会议上淘宝运维的九峰同学的PPT还是非常不错的。基本上对于应用运维做了一个很好的总结。一个好的应用
	运维基本要在产品设计阶段就要加入进去，这个时候加入进去对于你理解业务逻辑是非常有好处的，同时你可以发现某些
	肯定会对系统稳定性产生问题的设计提出自己的修改意见，毕竟产品一般都是不怎么懂得技术的。当然我们更关注的是产
	品的稳定性，至于产品要达到什么效果那是产品仔细考虑的东西。
	
	而在开发阶段，那需要跟开发商量通过哪些现有的开源程序可以达到产品需求，这个时候尽量使用那些你了解的，稳定的，
	最好版本已经超过0.5的那些软件。而不要使用那些你都不知道它的工作机制的软件。这个过程通常比较容易，毕竟开发也
	想这是一个稳定的应用，但是有些激进的开发者往往会自己造轮子，那你得明白这个轮子是怎么工作的。曾经在的那个视
	频公司就有这样的问题，很多东西都是开发自己造的轮子，连数据同步这些都是自己造的，但是由于不够稳定，给我工作
	造成了极大的麻烦。
	
	测试阶段，分为功能测试和压力测试。大部分公司都是这样分为2种，如果只有功能测试的公司，那你得注意了，应用的稳
	定性跟压力有时候是成正比的。
	
	发布阶段，这个比较简单，备份备份备份，可回滚可回滚可回滚。
	
	前面这些其实都是应用运维的先期工作，应用运维真正的工作现在才开始呢。通过各种工具查看系统和应用状态。基础的
	有:cpu使用率，内存使用率，io情况，网络连接数，网络流量等等。业务方面的可以看下现在的pv,uv以及你自己定制的
	各种事务流程。而这些数据不光是看应用是否有问题的，而且还是以后扩展这个应用还是砍掉这个应用的核心数据。
	
	应用运维的报警工作，比如pop3服务是否正确，应用的内部调用是否正常，有阻塞没？ 这些要是能做到预警机制那对你
	非常有利，在运营还没发现问题的时候你就解决了问题，那不是很好阿。当然这些你需要对这个应用的内部逻辑非常清楚
	才会方便的建立好。
	
	通过上面你可以发现应用运维包含了部分系统运维的工作。系统运维对于系统软件的工作机制和文档和各种操作系统发行
	版的文档要非常熟悉。而应用运维有时候更象是一个架构师和应用说明书。
