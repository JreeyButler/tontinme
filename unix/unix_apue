#chapter 1
	#file descriptor(文件描述符)
	  一个小的非负整数，内核用它标志一个特定进程正在访问的文件。当内核打开一个已有文件或者创建一个新文件\
		  时，它返回一个文件描述符，在读写文件时，就可以使用它
	#程序和进程和线程
	  程序是存放在磁盘上，处于某个目录中的一个可执行文件。使用6个exec函数中的一个由内核将程序读入存储器
	  程序的执行实例叫做进程
	    	unix系统确保每一个进程都有一个唯一的数字标识符，称为进程ID
	  通常，一个进程只有一个控制线程，同一时刻只执行一组机器指令。
	   	对于某些问题，如果不同部分各使用一个控制线程，那么整个问题解决起来就容易多了。另外，多线程也能\
			充分利用多处理器系统的并行性
	    	在一个进程内的所有线程共享同一地址空间，文件描述符，栈以及与进程有关的属性。因为它们能访问同一存储区,\
			所以各线程在访问共享数据时需要采取同步措施以避免不一致性
	    	线程也用ID标识。但是，线程ID只在它所属进程内起作用,一个进程中的线程ID在另一个进程中毫无意义
	#用户ID，组ID，附加组ID
	  口令文件登录项中的用户ID是个数值，它向系统标识各个不同的用户，系统管理员在确定一个用户的登录名的同时,\
		  确定其ID，用户不能更改其用户ID
	  内核使用用户ID检验该用户是否有执行某些操作的权限
	    	用户ID为0的用户为root。如果一个进程具有超级用户特权，则大多数文件权限检查都将不再进行
	  口令文件登录项也包括用户的组ID，这种机制允许同组的各个成员之间共享资源
	    	另外磁盘上的每个文件都存放该文件所有者的用户ID和组ID，它比登录名和组名占用较少的磁盘空间
	  大多数UNIX系统还允许一个用户属于另外的组。大多数系统至少支持16个附加组
	#信号
	  信号(signal)是通知进程已发生某种情况的一种技术
	  进程处理收到的信号有三种选择:
	  	1.忽略该信号
		2.按系统默认方式处理
		3.提供一个函数，信号发生时调用该函数，即捕捉该信号
	#时间值
	  UNIX使用两种不同的时间值
	  	1.日历时间。自1970年1月1日00:00:00以来国际标准时间(UTC)所经过的秒数累计值
		2.进程时间。即CPU时间，用以度量进程使用的cpu资源
	  当度量一个进程的执行时间时，UNIX使用三个进程时间值:
	  	1.时钟时间	是进程运行的时间总量，其值与系统中同时运行的进程数有关
		2.用户CPU时间	执行用户指令所用的时间
		3.系统CPU时间	为该进程执行内核程序所经历的时间
		用户CPU时间和系统CPU时间之和常被成为CPU时间
		要取得任一进程的三个时间，只需执行time，其参数是要执行的命令
			$time sh example.sh
			real	0m0.21s
			user	0m0.10s
			sys	0m0.10s
	#系统调用和库函数
	  所有的操作系统都提供多种服务的入口点，程序由此向内核请求服务。各种版本的UNIX实现都提供定义明确，\
		  数量有限，可直接进入内核的入口点，这些入口点被成为系统调用
	  UNIX所使用的技术是为每个系统调用在标准C库中设置一个具有相同名字的函数，用户进程用标准C调用序列\
		  来调用这些函数，然后函数又用系统所要求的技术调用相应的内核服务
	  虽然有些函数可能会调用一个或多个内核的系统调用，但是它们并不是内核的入口点
	  从用户角度讲，系统调用和库函数的区别并不非常重要。但是必要时，我们可以替换库函数，而通常不能替换系统调用
	  我们可以自己实现调用系统调用的库函数，以替代原有的库函数
	  系统调用和库函数的另一个差别是：系统调用通常提供一种最小接口，而库函数通常提供比较复杂的功能
#chapter 2 UNIX标准化及实现
	#ISO C
	  ISO C标准的意图是提供C程序的可移植性，使其能适合于大量不同的操作系统，而不只是UNIX系统。
	  此标准不仅定义了C程序设计语言的语法和语义，还定义了其标准库。所有现今的UNIX系统都提供C标准中定义的库例程
	#IEEE POSIX
	  POSIX指可移植的操作系统接口(Portable Operating System Interface)
	  它原来指的只是IEEE标准1003.1-1998(操作系统接口)，后来则扩展成包括很多标记为1003的标准及标准草案，包括shell
	  	和实用程序
	  POSIX.1包括ISO C标准库
	#Single UNIX Specification
	  Single UNIX Specification(单一UNIX规范)是POSIX.1标准的一个超集，定义了一些附加的接口，这些接口扩展了\
		  基本的POSIX.1规范所提供的功能。相应的系统接口全集被称为X/Open系统接口(XSI,X/Open System Interface)
	  XSI还定义了实现必须支持POSIX.1词典哪些可选部分才能认为是遵循XSI(XSI conforming)的，它们包括文件同步，\
		  存储映射文件，存储保护及线程接口。
	  只有遵循XSI的实现才能被成为UNIX系统
	#UNIX系统实现
	  SVR4(UNIX System V Release 4)是AT&T的UNIX系统实验室(USL)的产品
	  BSD(Berkeley Software Distrribution)版是由加州大学伯克利分销的计算机系统研究组(CSRG)研究开发和分发的
	  FreeBSD的基础是4.4BSD-Lite.FreeBSD产生的所有软件都是免费使用的
	  NetBSD项目类似于FreeBSD，但是更注重不同硬件平台之间的可移植性
	  OpenBSD项目也类似于FreeBSD，但是更注重安全性
	  linux是一种提供丰富的UNIX编程环境的操作系统
	  Mac OS X使用了与上面完全不同的技术，其核心操作系统被称为Darwin,它基于Mach内核和FreeBSD操作系统的组合\
		  类似于FreeBSD和Linux，Darwin是一个开放源代码项目
	  Solaris基于SVR4，它是唯一在商业上取得成功的SVR4后裔
	  AIX是IBM版的UNIX系统
	  HP-UX是HP版的UNIX系统
	  IRIX，Silicon Graphics版的UNIX系统
	  Unix ware是SVR4派生的UNIX系统，现由SCO销售
	#限制
	  UNIX系统实现定义了很多幻数和常量，以下两种类型的限制是必须的：
	  	1.编译时限制（例如，短整型的最大值是什么）
	  	2.运行时限制（例如，文件名可以有多少个字符）
	  ISO C限制都是编译时限制
	  POSIX.1定义了很多涉及操作系统实现限制的常量
	  XSI定义的常量比POSIX多几个
	#标注之间的冲突
	  就整体而言，这些不同的标准之间配合的相当好。但是它们之间也有一些差异，特别是ISO C标准和POSIX.1之间的差别
#chapter 3 文件I/O
	#文件描述符
	  对于内核而言，所有打开的文件都通过文件描述引用。文件描述符是一个非负整数。当打开或创建一个文件时，内\
		  核向进程返回一个文件描述符。当读或写一个文件时，使用Open或create返回的文件描述符标识该文件,\
		  将其作为参数传递给read或write
	  文件描述符的变化范围是0~OPEN_MAX，现在很多系统采用的上限是63(早期是20)(允许每个进程最多打开63个文件)
	  	#Note:FreeBSDr, Mac OS x,Solaris等系统文件描述符的变化范围实际上是无限的,它只受到系统配置的存储\
			器总量、整型的字长以及系统管理员所配置的软限制和硬限制的约束
		#Note:Linux2.4.22对于每个进程的文件描述符的硬限制是1 048 576
	  当一个进程终止时，内核自动关闭它所有打开的文件。很多程序都利用了这一功能而不显式的用close关闭打开的文件
	  当前文件偏移量
	  	每个打开的文件都有一个与其相关联的“当前文件偏移量”(current file offset)。它通常是一个非负整数，\
			用以度量从文件开始处计算的字节数。
		通常，读、写操作都从当前文件偏移量处开始，并使偏移量增加所读写的字节数。
		按系统默认的情况，当打开一个文件时，除非指定O_APPEND选项，否则该偏移量被设置为0
		文件偏移量可以大于文件的当前长度，在这种情况下,对该文件的下一次写将加长该文件，并在文件中构成一个\
			空洞。这一点是允许的，位于文件中但没有写过的字节都被读为0
		文件中的空洞并不要求在磁盘上占用存储区
	  原子操作
	  延迟写
		传统的UNIX实现在内核中设有缓冲区高速缓存或页面高速缓存，大多数磁盘I/O都通过缓冲进行。当将数据\
			写入文件时，内核通常先将该数据复制到其中一个缓冲区中，如果该缓冲区尚未写满，则并不将其\
			排入输出队列，而是等待其写满或内核需要重用该缓冲区时，再将该缓冲排入输出队列，然后待其\
			到达队首时，才进行实际的I/O操作。这种输出方式叫做延迟写(delayed write)
		延迟写减少了磁盘读写次数，但是却降低了文件内容的更新速度。
		系统故障时，可能造成文件更新内容的丢失
		#Note:read和write都在内核中执行，所以称这些函数为不带缓冲的I/O函数
	  /dev/fd
		/dev/fd目录下是名为0、1、2等的文件，打开文件/dev/fd/n等效于复制描述符n(假定描述符n是打开的)
		某些系统提供路径名/dev/stdin,/dev/stdout,/dev/stderr，这些等效于/dev/fd/0，/dev/fd/1，/dev/fd/2
		/dev/fd文件主要由shell使用，它允许使用路径名作为调用参数的程序，能用处理其他路径名的相同方式处理\
			标准输入和输出
		  eg. $cat -				#cat 标准输入，单独的字符-解释为标准输入
		      $cat /dev/fd/0 (/dev/stdin)	#与上面的作用相同，同时避免了会把"-"认为是命令行的选项的问题
#chapter 4 文件和目录
	#文件类型
	  普通文件	这种文件包含了某种形式的数据，至于这种数据是文本还是二进制对UNIX内核而言并无区别
			#Note:一个值得注意的例外是二进制可执行文件，为了执行程序，内核必须理解其格式。所有二进制\
			#	可执行文件都遵循一种格式，这种格式使内核能够确定程序文本和数据的加载位置
	  目录文件	这种文件包含了其他文件的名字以及指向与这些文件有关信息的指针
	  块特殊文件	这种文件类型提供对设备（如磁盘）带缓冲的访问，每次访问以固定长度为单位进行
	  字符特殊文件	这种文件类型提供对设备不带缓冲的访问，每次访问长度可变。
	  		#系统中的所有设备要么是字符特殊文件，要么是块设备文件
	  FIFO		这种类型文件用于进程间通信，有时也将其称为命名管道(named pipe)
	  套接字	这种文件类型适用于进程间的网络通信，套接字(socket)也可以用于在一台宿主机上进程之间的非\
				网络通信
	  符号链接	这种文件类型指向另一个文件
	#用户ID和组ID
	  实际用户ID和实际组ID标识我们究竟是谁，这两个字段在登录时取自口令文件中的登录项
		通常在一个登录会话间这些值并不改变，但是超级用户进程有方法改变它们
	  有效用户ID、有效组ID以及附加组ID决定了我们的访问权限
	  保存的设置用户ID和保存的设置组ID在执行一个程序时包含了有效用户ID和有效组ID的副本
		由exec函数保存
	  通常，有效用户ID等于实际用户ID，有效组ID等于实际组ID
		但是可以在文件模式字(st_mode)中设置一个特殊标志，其含义是"当执行此文件时，将进程的有效用户ID设置\
			为文件所有者的用户ID(st_uid)"
		与此类似，在文件模式字中可以设置另一位，它使得将执行此文件的进程的有效组ID设置为文件的所有组ID
		在文件模式字中，这两位被称为设置用户ID(set-user-ID)位和设置组ID(set-group-ID)位
	#文件访问权限
	  所有文件类型都有访问权限
	  我们用名字打开任一类型的文件时，对改名字中包含的每一个目录，包括它可能隐含的当前工作目录(./)都应具有\
		  执行权限。这就是为什么对于目录其执行权限位常被称为搜索位的原因
	  对于目录的读权限和执行权限的意义是不同的。读权限允许我们读目录，获得在该目录中所有文件名的列表。当\
		  一个目录是我们要访问文件的路径名的一个组成部分时，对该目录的执行权限使我们可通过该目录（也\
		  就是搜索目录，寻找一个特定的文件名）
	  为了在一个目录中创建一个新文件，必须对包含该文件的目录具有写权限和执行权限
	  为了删除一个现有的文件，必须对包含该文件的目录具有写权限和执行权限，对该文件本身则不需要读、写权限
	  进程每次打开、创建或删除一个文件时，内核就进行文件访问权限测试
	  	1.若进程的有效用户ID是0(root)，则允许访问。这给予了超级用户对整个文件系统进行处理的最充分的自由
		2.若进程的有效用户ID等于文件的所有者ID(也就是该进程拥有此文件)，那么：若所有者适当的访问权限位\
			被设置，则允许访问，否则拒绝访问
		3.若进程的有效组ID或进程的附加组ID之一等于文件的组ID，那么：若组适当的访问权限被设置，则允许访问\
			否则拒绝访问
		4.若其他用户适当的访问权限位被设置，则允许访问，否则拒绝访问
		#Note:适当访问权限--若进程为读而打开该文件，则用户读位应为1，若进程为写而打开该文件,则用户写位应为\
		#	1，若进程将执行该文件，则用户执行位应为1
	#新文件和目录的所有权
	  创建新文件时：新文件的用户ID设置为进程的有效用户ID。关于组ID，POSIX.1允许实现选择下列之一作为新文件的组ID
		1.新文件的组ID可以是进程的有效组ID
	        2.新文件的组ID可以是它所在目录的组ID	
	  具体组ID的选定依具体的OS规定
	#粘住位
